//*
// Сервис CRUD операций с клиентами

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0--rc1
// source: books.proto

package books_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BooksService_AddBook_FullMethodName               = "/books_v1.service.BooksService/AddBook"
	BooksService_AddAuthor_FullMethodName             = "/books_v1.service.BooksService/AddAuthor"
	BooksService_GetAllBookWithAuthor_FullMethodName  = "/books_v1.service.BooksService/GetAllBookWithAuthor"
	BooksService_GetBookWithAuthor_FullMethodName     = "/books_v1.service.BooksService/GetBookWithAuthor"
	BooksService_GetAllAuthorWithBooks_FullMethodName = "/books_v1.service.BooksService/GetAllAuthorWithBooks"
)

// BooksServiceClient is the client API for BooksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// Сервис CRUD операций с книгами
type BooksServiceClient interface {
	AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*Response, error)
	AddAuthor(ctx context.Context, in *AddAuthorRequest, opts ...grpc.CallOption) (*Response, error)
	GetAllBookWithAuthor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooksResponse, error)
	GetBookWithAuthor(ctx context.Context, in *AuthorID, opts ...grpc.CallOption) (*BookWithAuthor, error)
	GetAllAuthorWithBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthorResponse, error)
}

type booksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksServiceClient(cc grpc.ClientConnInterface) BooksServiceClient {
	return &booksServiceClient{cc}
}

func (c *booksServiceClient) AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BooksService_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) AddAuthor(ctx context.Context, in *AddAuthorRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, BooksService_AddAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) GetAllBookWithAuthor(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BooksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BooksResponse)
	err := c.cc.Invoke(ctx, BooksService_GetAllBookWithAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) GetBookWithAuthor(ctx context.Context, in *AuthorID, opts ...grpc.CallOption) (*BookWithAuthor, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookWithAuthor)
	err := c.cc.Invoke(ctx, BooksService_GetBookWithAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksServiceClient) GetAllAuthorWithBooks(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AuthorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorResponse)
	err := c.cc.Invoke(ctx, BooksService_GetAllAuthorWithBooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksServiceServer is the server API for BooksService service.
// All implementations must embed UnimplementedBooksServiceServer
// for forward compatibility.
//
// *
// Сервис CRUD операций с книгами
type BooksServiceServer interface {
	AddBook(context.Context, *AddBookRequest) (*Response, error)
	AddAuthor(context.Context, *AddAuthorRequest) (*Response, error)
	GetAllBookWithAuthor(context.Context, *Empty) (*BooksResponse, error)
	GetBookWithAuthor(context.Context, *AuthorID) (*BookWithAuthor, error)
	GetAllAuthorWithBooks(context.Context, *Empty) (*AuthorResponse, error)
	mustEmbedUnimplementedBooksServiceServer()
}

// UnimplementedBooksServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBooksServiceServer struct{}

func (UnimplementedBooksServiceServer) AddBook(context.Context, *AddBookRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBooksServiceServer) AddAuthor(context.Context, *AddAuthorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthor not implemented")
}
func (UnimplementedBooksServiceServer) GetAllBookWithAuthor(context.Context, *Empty) (*BooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBookWithAuthor not implemented")
}
func (UnimplementedBooksServiceServer) GetBookWithAuthor(context.Context, *AuthorID) (*BookWithAuthor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookWithAuthor not implemented")
}
func (UnimplementedBooksServiceServer) GetAllAuthorWithBooks(context.Context, *Empty) (*AuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAuthorWithBooks not implemented")
}
func (UnimplementedBooksServiceServer) mustEmbedUnimplementedBooksServiceServer() {}
func (UnimplementedBooksServiceServer) testEmbeddedByValue()                      {}

// UnsafeBooksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksServiceServer will
// result in compilation errors.
type UnsafeBooksServiceServer interface {
	mustEmbedUnimplementedBooksServiceServer()
}

func RegisterBooksServiceServer(s grpc.ServiceRegistrar, srv BooksServiceServer) {
	// If the following call pancis, it indicates UnimplementedBooksServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BooksService_ServiceDesc, srv)
}

func _BooksService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksService_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).AddBook(ctx, req.(*AddBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_AddAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).AddAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksService_AddAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).AddAuthor(ctx, req.(*AddAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_GetAllBookWithAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).GetAllBookWithAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksService_GetAllBookWithAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).GetAllBookWithAuthor(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_GetBookWithAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).GetBookWithAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksService_GetBookWithAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).GetBookWithAuthor(ctx, req.(*AuthorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksService_GetAllAuthorWithBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServiceServer).GetAllAuthorWithBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BooksService_GetAllAuthorWithBooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServiceServer).GetAllAuthorWithBooks(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BooksService_ServiceDesc is the grpc.ServiceDesc for BooksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BooksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "books_v1.service.BooksService",
	HandlerType: (*BooksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBook",
			Handler:    _BooksService_AddBook_Handler,
		},
		{
			MethodName: "AddAuthor",
			Handler:    _BooksService_AddAuthor_Handler,
		},
		{
			MethodName: "GetAllBookWithAuthor",
			Handler:    _BooksService_GetAllBookWithAuthor_Handler,
		},
		{
			MethodName: "GetBookWithAuthor",
			Handler:    _BooksService_GetBookWithAuthor_Handler,
		},
		{
			MethodName: "GetAllAuthorWithBooks",
			Handler:    _BooksService_GetAllAuthorWithBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "books.proto",
}
